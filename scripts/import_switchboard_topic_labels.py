import codecs
import os
import re

from visualizer.models import Corpus, Document, DocumentTopic, DocumentTopicTermInfo, Term

def run():
    corpus = Corpus.objects.get(name=u"Switchboard_dtw0.80_OLAPTHR0.97")

    # Topic file is a space-separated file WITHOUT a header line, with the format:
    #   sw02815_A 0
    #   sw02092_A 5
    topic_file = os.path.join(os.getenv("HOME"), "zr_datasets/switchboard_dtw0.80_OLAPTHR0.97/cluster.outputs")
    topic_lines = codecs.open(topic_file, encoding="utf-8").readlines()

    topic_labels = [
        'recycling',
        'capital punishment',
        'job benefits',
        'drug testing',
        'car buying',
        'family finance',
    ]

    for topic_line in topic_lines:
        (audio_identifier, topic_label_index) = topic_line.strip().split()
        document = Document.objects.get(audio_identifier=audio_identifier)
        label = topic_labels[int(topic_label_index)]
        (document_topic, _) = DocumentTopic.objects.get_or_create(corpus=corpus, label=label)
        document_topic.documents.add(document)

    # The cluster info file is generated by CLUTO, and is a little more complicated
    # than a CSV or TSV file.  Here's the relevant section of the file:
    #   --------------------------------------------------------------------------------
    #   6-way clustering solution - Descriptive & Discriminating Features...
    #   --------------------------------------------------------------------------------
    #   Cluster   0, Size:    60, ISim: 0.028, ESim: 0.003
    #         Descriptive:  col00275  1.8%, col01183  1.4%, col01187  0.5%, col00356  0.4%, col07504  0.3%
    #      Discriminating:  col00275  1.1%, col01183  0.9%, col02735  0.3%, col01187  0.3%, col00356  0.2%
    #
    #   Cluster   1, Size:    60, ISim: 0.027, ESim: 0.003
    #         Descriptive:  col05233  1.8%, col02138  0.8%, col10646  0.6%, col02139  0.6%, col05340  0.4%
    #      Discriminating:  col05233  1.2%, col02138  0.5%, col10646  0.4%, col02139  0.4%, col00162  0.3%
    #   ...
    #   --------------------------------------------------------------------------------
    topic_info_file = os.path.join(os.getenv("HOME"), "zr_datasets/switchboard_dtw0.80_OLAPTHR0.97/cluster_2.nfeatures.log")
    topic_info_lines = codecs.open(topic_info_file, encoding="utf-8").readlines()

    for (line_index, line) in enumerate(topic_info_lines):
        m = re.search('Cluster\s+(\d+)', line)
        if m:
            topic_label_index = int(m.group(1))
            print "\nTopic: %s (#%d)" % (topic_labels[topic_label_index], topic_label_index)

            descriptive_line = topic_info_lines[line_index+1]
            # Sample score_line: '  col05233  1.8%, col02138  0.8%, col10646  0.6%, col02139  0.6%, col05340  0.4%  '
            score_line = descriptive_line.split(':')[1]
            for score_string in score_line.split(','):
                m = re.search('col(\d+)\s+(\d+\.?\d*)', score_string)
                # zr_term_index is 0-indexed, but 'colXXXX' is 1-indexed
                zr_term_index = int(m.group(1)) - 1
                score = float(m.group(2))
                if score != 0:
                    document_topic = DocumentTopic.objects.get(corpus=corpus, label=topic_labels[int(topic_label_index)])
                    term = Term.objects.get(corpus=corpus, zr_term_index=zr_term_index)
                    dtti = DocumentTopicTermInfo()
                    dtti.document_topic = document_topic
                    dtti.term = term
                    dtti.category = 'Descriptive'
                    dtti.score = score
                    dtti.save()
                    print "Descriptive: zr_term_index=%d, score=%f, Term.id=%d" % (zr_term_index, score, term.id)

            discriminating_line = topic_info_lines[line_index+2]
            score_line = discriminating_line.split(':')[1]
            for score_string in score_line.split(','):
                m = re.search('col(\d+)\s+(\d+\.?\d*)', score_string)
                zr_term_index = int(m.group(1)) - 1
                score = float(m.group(2))
                if score != 0:
                    document_topic = DocumentTopic.objects.get(corpus=corpus, label=topic_labels[int(topic_label_index)])
                    term = Term.objects.get(corpus=corpus, zr_term_index=zr_term_index)
                    dtti = DocumentTopicTermInfo()
                    dtti.document_topic = document_topic
                    dtti.term = term
                    dtti.category = 'Discriminating'
                    dtti.score = score
                    dtti.save()
                    print "Discriminating: zr_term_index=%d, score=%f, Term.id=%d" % (zr_term_index, score, term.id)
